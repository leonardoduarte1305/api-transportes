openapi: 3.0.2

info:
  version: "1.0.0"
  title: Api-Transportes
  description: |
    Esta Api foi criada como prte integramde do trabalho de conclsão se curso da
    Faculdade Senac Florianópolis. Esta OAS3 descreve todos os endpoins disponíveis
    para utilização pelo consumidor desta aplicação
  termsOfService: "https://www.apache.org/licenses/LICENSE-2.0"
  contact:
    email: leonardoduarte1305@gmail.com
  license:
    name: Licença Apache
    url: "https://www.apache.org/licenses/LICENSE-2.0"
tags:
  - name: "Sedes"
    description: "Descreve os endpoints para o gerenciamento das Sedes"

  - name: "Veiculos"
    description: "Descreve os endpoints para o gerenciamento dos Veiculos"

  - name: "Motoristas"
    description: "Descreve os endpoints para o gerenciamento dos Motoristas"

  - name: "Materiais"
    description: "Descreve os endpoints para o gerenciamento dos Materiais"

  - name: "Destinos"
    description: "Descreve os endpoints para o gerenciamento dos Destinos"

  - name: "Viagens"
    description: "Descreve os endpoints para o gerenciamento das Viagens"

  - name: "Setores"
    description: "Descreve os endpoints para o gerenciamento das Setores"

  - name: "Usuarios"
    description: "Descreve os endpoints para o gerenciamento de Usuarios"

  - name: "Eventos"
    description: "Descreve os endpoints para quaisquer outras implementações que eu ache legais de fazer. Hehehe"

servers:
  - description: Personalizado
    url: "{protocolo}://{host}:{porta}{raiz}"
    variables:
      protocolo:
        default: http
        enum:
          - http
          - https
      host:
        default: localhost
        enum:
          - localhost
          - 127.0.0.1
      porta:
        default: '8080'
        enum:
          - '8080'
          - '8081'
          - '8082'
      raiz:
        default: /
        enum:
          - /
          - /v1

paths:
  /sedes:
    post:
      operationId: criarSede
      summary: Cria uma sede
      description: "Cria uma sede com base nos dados fornecidos."
      tags:
        - Sedes
      requestBody:
        required: true
        description: "Um objeto UpsertSede deve ser fornecido"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertSede'
      responses:
        201:
          headers:
            Location:
              description: "Localização da sede criada"
              schema:
                type: number
                format: int32
                example: "/sedes/{id}"
          description: "Created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sede'
    get:
      operationId: listaTodasAsSedes
      summary: Lista todas as sedes
      description: "Lista todas as sedes ordenadas por ID."
      tags:
        - Sedes
      responses:
        200:
          description: "Lista de Sedes ordenadas por ID."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sede'
  /sedes/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    put:
      operationId: editarSede
      summary: Edita uma sede
      description: "Altera uma sede com base nos dados fornecidos."
      tags:
        - Sedes
      requestBody:
        description: "Um objeto UpsertSede deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertSede'
      responses:
        201:
          description: "Updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sede'
    delete:
      operationId: excluirSede
      summary: Exclui uma sede
      description: "Exclui o registro de uma sede específica. 
          Se esta sede for referenciada em algum Destino ou Viagem ela não será excluída."
      tags:
        - Sedes
      responses:
        204:
          description: "Deleted"
        400:
          description: "Id inválido"
    get:
      operationId: trazSedePorId
      summary: Traz uma sede por id
      description: "Devolve uma sede específica, selecionando-a pelo seu ID."
      tags:
        - Sedes
      responses:
        200:
          description: "Devolve uma sede específica buscando por ID."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sede'
  /sedes/{id}/inscrever:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: inscrever
      summary: Inscerve um usuário em uma sede
      description: "Inscreve um ou mais usuarios em uma fila. Quando alguém adiciona como
       Destino uma sede relevante para esse(s) usuario(s), ele(s) recebe(m) notificação por email."
      tags:
        - Sedes
      requestBody:
        description: "Uma lista de emails deve ser fornecida"
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        204:
          description: "Inscrição feita com sucesso."
  /sedes/{id}/desinscrever:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: desinscrever
      summary: Desinscerve um usuário de uma sede
      description: "Desinscreve um ou mais usuarios de uma fila. Após ter sua inscricao cancelada, este
      ou estes usuarios não mais receberão notificações referentes à esta sede."
      tags:
        - Sedes
      requestBody:
        description: "Uma lista de emails deve ser fornecida"
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        204:
          description: "Desinscrição feita com sucesso."

  /motoristas:
    post:
      operationId: criarMotorista
      summary: Cria um motorista
      description: "Cria um motorista com base nos dados fornecidos."
      tags:
        - Motoristas
      requestBody:
        description: "Um objeto AtributosMotorista deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AtributosMotorista'
      responses:
        201:
          headers:
            Location:
              description: "Localização do motorista criado"
              schema:
                type: number
                format: int32
                example: "/motoristas/{id}"
          description: "Created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motorista'
    get:
      operationId: listaTodosMotoristas
      summary: Lista todos os motoristas
      description: "Lista todos os motoristas ordenados por ID."
      tags:
        - Motoristas
      responses:
        200:
          description: "Lista dos motoristas ordenados por ID."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Motorista'
  /motoristas/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    put:
      operationId: editarMotorista
      summary: Edita um motorista
      description: "Altera o cadastro de um motorista com base no seu ID e nos dados fornecidos."
      tags:
        - Motoristas
      requestBody:
        description: "Um objeto AtributosMotorista deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AtributosMotorista'
      responses:
        200:
          description: "Updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motorista'
    delete:
      operationId: excluirMotorista
      summary: Exclui um motorista
      description: "Exclui o registro de um motorista específico."
      tags:
        - Motoristas
      responses:
        204:
          description: "Deleted"
        400:
          description: "Id inválido"
    get:
      operationId: trazMotoristaPorId
      summary: Traz um motorista por id
      description: "Devolve um motorista específico, selecionando-o pelo seu ID."
      tags:
        - Motoristas
      responses:
        200:
          description: "Devolve um motorista específico buscando por ID."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motorista'

  /veiculos:
    post:
      operationId: criarVeiculo
      summary: Cria um veiculo
      description: "Cria um veículo com base nos dados fornecidos."
      tags:
        - Veiculos
      requestBody:
        description: "Um objeto UpsertVeiculo deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertVeiculo'
      responses:
        201:
          headers:
            Location:
              description: "Localização do veiculo criado"
              schema:
                type: number
                format: int32
                example: "/veiculos/{id}"
          description: "Created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Veiculo'
    get:
      operationId: listaTodosVeiculos
      summary: Lista todos os veiculos
      description: "Lista todos os veiculos ordenados por ID."
      tags:
        - Veiculos
      responses:
        200:
          description: "Lista dos veiculos ordenados por ID."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Veiculo'
  /veiculos/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    put:
      operationId: editarVeiculo
      summary: Edita um veiculo
      description: "Altera o cadastro de um veiculo com base no seu ID e nos dados fornecidos."
      tags:
        - Veiculos
      requestBody:
        description: "Um objeto UpsertVeiculo deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertVeiculo'
      responses:
        201:
          description: "Updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Veiculo'
    delete:
      operationId: excluirVeiculo
      summary: Exclui um veiculo
      description: "Exclui o registro de um veículo específico."
      tags:
        - Veiculos
      responses:
        204:
          description: "Deleted"
        400:
          description: "Id inválido"
    get:
      operationId: trazVeiculoPorId
      summary: Traz um veiculo por id
      description: "Devolve um veículo específico, selecionando-o pelo seu ID."
      tags:
        - Veiculos
      responses:
        200:
          description: "Devolve um veiculo específico buscando por ID."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Veiculo'

  /materiais:
    post:
      operationId: criarMaterial
      summary: Cria um material
      description: "Cria uma Material com base nos dados fornecidos."
      tags:
        - Materiais
      requestBody:
        description: "Um objeto UpsertMaterial deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertMaterial'
      responses:
        201:
          headers:
            Location:
              description: "Localização do material criado"
              schema:
                type: number
                format: int32
                example: "/materiais/{id}"
          description: "Created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
    get:
      operationId: listaTodosMateriaisCadastrados
      summary: Lista todos os materiais
      description: "Lista todos os materiais cadastrados ordenados por ID."
      tags:
        - Materiais
      responses:
        200:
          description: "Lista dos materiais cadastrados ordenados por ID."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Material'
  /materiais/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    put:
      operationId: editarCadastroMaterial
      summary: Edita um material
      description: "Altera o cadastro de um material com base no seu ID e nos dados fornecidos.
          Ao alterar este material ele será alterado em todos os lugares onde ele é utilizado."
      tags:
        - Materiais
      requestBody:
        description: "Um objeto UpsertMaterial deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertMaterial'
      responses:
        201:
          description: "Updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
    delete:
      operationId: excluirMaterial
      summary: Exclui um material
      description: "Exclui o registro de um material específico.
          Ao remover este material ele será removido de todos os lugares onde ele é utilizado."
      tags:
        - Materiais
      responses:
        204:
          description: "Deleted"
        400:
          description: "Id inválido"
    get:
      operationId: trazMaterialPorId
      summary: Traz um material por id
      description: "Devolve um material específico, selecionando-o pelo seu ID."
      tags:
        - Materiais
      responses:
        200:
          description: "Devolve um material específico buscando por ID."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'

  /destinos:
    post:
      operationId: criarDestino
      summary: Cria um destino
      description: "Cria um Destino com base nos dados fornecidos.
          Se o Admin estiver criando o destino ele já será cadastrado como confirmado.
          Se outro usuário estiver cadastrando o destino ele ainda precisará de confirmação."
      tags:
        - Destinos
      requestBody:
        description: "Um objeto UpsertDestino deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertDestino'
      responses:
        201:
          headers:
            Location:
              description: "Localização do destino criado"
              schema:
                type: number
                format: int32
                example: "/destinos/{id}"
          description: "Created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destino'
  /destinos/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    put:
      operationId: editarDestino
      summary: Edita um destino
      description: "Altera o cadastro de um destino com base no seu ID e nos dados fornecidos."
      tags:
        - Destinos
      requestBody:
        description: "Um objeto UpsertDestino deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertDestino'
      responses:
        201:
          description: "Updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destino'
    delete:
      operationId: excluirDestino
      summary: Exclui um destino
      description: "Exclui o registro de um destino específico.
          Ao remover este destino ele será removido da Viagem onde ele está registrado."
      tags:
        - Destinos
      responses:
        204:
          description: "Deleted"
        400:
          description: "Id inválido"
    get:
      operationId: trazDestinoPorId
      summary: Traz um destino por id
      description: "Devolve um destino específico, selecionando-o pelo seu ID."
      tags:
        - Destinos
      responses:
        200:
          description: "Devolve um destino específico buscando por ID."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destino'
  /destinos/{id}/materiais:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: trazMateriaisDoDestino
      summary: Lista todos os materiais de um destino
      description: "Devolve a lista de materiais deste destino específico."
      tags:
        - Destinos
      responses:
        200:
          description: "Devolve a lista de materiais deste destino específico."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MaterialQuantidadeSetor'
  /destinos/{id}/confirmacao:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: confirmaDestino
      summary: Contirma um destino
      description: "Confirma um destino."
      tags:
        - Destinos
      requestBody:
        description: "Um objeto Confirmacao deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Confirmacao'
      responses:
        204:
          description: "Destino foi confirmado."

  /viagens:
    post:
      operationId: criarViagem
      summary: Cria uma viagem
      description: "Cria uma Viagem com base nos dados fornecidos."
      tags:
        - Viagens
      requestBody:
        description: "Um objeto UpsertViagem deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertViagem'
      responses:
        201:
          headers:
            Location:
              description: "Localização da viagem criada"
              schema:
                type: number
                format: int32
                example: "/viagens/{id}"
          description: "Created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Viagem'
    get:
      description: "Lista todas as viagens cadastradas ordenadas por ID."
      summary: Lista todas as viagens
      operationId: listaTodasViagens
      tags:
        - Viagens
      responses:
        200:
          description: "Lista das viagens cadastradas ordenadas por ID."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Viagem'
  /viagens/{id}:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: trazViagemPorId
      summary: Traz uma viagem por id
      description: "Devolve uma viagem específica, selecionando-a pelo seu ID."
      tags:
        - Viagens
      responses:
        200:
          description: "Success."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Viagem'
    put:
      operationId: editarViagem
      summary: Edita uma viagem
      description: "Altera o cadastro de uma viagem com base no seu ID e nos dados fornecidos."
      tags:
        - Viagens
      requestBody:
        description: "Um objeto UpsertViagem deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertViagem'
      responses:
        201:
          description: "Updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Viagem'
    delete:
      operationId: excluirViagem
      summary: Exclui uma viagem
      description: "Exclui o registro de uma viagem específica.
              Aremoção é apenas lógica, o registro continua persistido no banco de dados
              e pode ser consultado apenas utilizando queries contra o banco."
      tags:
        - Viagens
      responses:
        204:
          description: "Deleted"
        400:
          description: "Id inválido"
  /viagens/{id}/destinos:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: trazDestinosDaViagem
      summary: Lista todos os destinos de uma viagem
      description: "Devolve a lista de destinos desta viagem específica."
      tags:
        - Viagens
      responses:
        200:
          description: "Devolve a lista de destinos desta viagem específica."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Destino'
  /viagens/{id}/confirmacao:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: confirmaViagem
      summary: Confirma uma viagem
      description: "Confirma uma viagem e todos os destinos cadastrados até agora."
      tags:
        - Viagens
      requestBody:
        description: "Um objeto Confirmacao deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Confirmacao'
      responses:
        204:
          description: "Viagem foi confirmada."
  /viagens/{id}/encerramento:
    parameters:
      - $ref: '#/components/parameters/id'
    post:
      operationId: encerraViagem
      summary: Encerra uma viagem
      description: "Confirma uma viagem e todos os destinos cadastrados até agora."
      tags:
        - Viagens
      requestBody:
        description: "Um objeto Encerramento deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Encerramento'
      responses:
        204:
          description: "Viagem foi encerrada."
  /viagens/{id}/exportar:
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      operationId: relatorioDeViagem
      summary: Download do relatrório de uma viagem
      description: "Devolve um relatório sobre esta viagem específica."
      tags:
        - Viagens
      responses:
        200:
          description: "Conteúdo anexado."
          content:
            application/pdf:
              schema:
                type: object

  /setores:
    post:
      operationId: criarSetor
      summary: Cria um setor
      description: "Cria um setor com base nos dados fornecidos."
      tags:
        - Setores
      requestBody:
        description: "Um objeto Setor deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Setor'
      responses:
        201:
          headers:
            Location:
              description: "Localização do setor criado"
              schema:
                type: number
                format: int32
                example: "/setores/{id}"
          description: "Created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setor'
    get:
      operationId: listaTodosOsSetores
      summary: Lista todos os setores
      description: "Lista todos os setores ordenados por ID."
      tags:
        - Setores
      responses:
        200:
          description: "Accepted"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Setor'

  /usuarios:
    post:
      operationId: criarUsuario
      summary: Cria um usuário
      description: "Cria um usuário no Keycloak que consegue acessar os recursos da aplicação de acordo
        com sua Role"
      tags:
        - Usuarios
      requestBody:
        description: "Um objeto UpsertUsuario deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertUsuario'
      responses:
        201:
          description: "Localização do usuario criado"
  /usuarios/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: "O id da entidade que desejamos analisar"
        schema:
          type: string
    delete:
      operationId: excluirUsuario
      summary: Exclui um usuário
      description: "Exclui o registro de um usuario específico."
      tags:
        - Usuarios
      responses:
        204:
          description: "Excluido"
        400:
          description: "Id inválido"

  /eventos/sedes:
    post:
      operationId: criarSedeUsandoEvento
      summary: "Cria uma sede usando evento"
      description: "Cria uma sede com base nos dados fornecidos usando Spring Events."
      tags:
        - Eventos
      requestBody:
        description: "Um objeto UpsertSede deve ser fornecido"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertSede'
      responses:
        201:
          description: "Created"

components:
  schemas:
    Usuario:
      type: object
      properties:
        id:
          type: integer
          description: "Atributo que identifica cada usuário de maneira única."
          example: "22"
      allOf:
        - $ref: '#/components/schemas/UpsertUsuario'
    UpsertUsuario:
      type: object
      properties:
        username:
          type: string
          example: "talita01"
        password:
          type: string
          example: "abc123"
          format: password
          writeOnly: true
        nome:
          type: string
          example: "Talita"
        sobrenome:
          type: string
          example: "da Silva"
        email:
          type: string
          example: "meuemail@gmail.com"
          format: email
        role:
          type: string
          enum:
            - ADMIN
            - USER
          example: "ADMIN"
      required:
        - email
        - roles
        - username
        - password

    Endereco:
      type: object
      properties:
        rua:
          type: string
          description: "Nome da rua onde a sede está localizada"
          example: "Rua dos Bobos"
        numero:
          type: integer
          description: "Número, complemento à rua"
          example: "1015"
        cep:
          type: string
          description: "CEP da localidade."
          pattern: '\d{5}\-\d{3}'
        cidade:
          type: string
          description: "Nome da cidade onde a sede está localizada"
          example: "Tijucas"
        uf:
          $ref: '#/components/schemas/Uf'
          example: "SC"
      required:
        - rua
        - numero
        - cep
        - cidade
        - uf
    Uf:
      type: string
      enum:
        - RO
        - AC
        - AM
        - RR
        - PA
        - AP
        - TO
        - MA
        - PI
        - CE
        - RN
        - PB
        - PE
        - AL
        - SE
        - BA
        - MG
        - ES
        - RJ
        - SP
        - PR
        - SC
        - RS
        - MS
        - MT
        - GO
        - DF
    AtributosSede:
      type: object
      properties:
        nome:
          type: string
          description: "Nome da sede ou referência à esta sede especificamente."
          example: "DPE 01 - Criciuma."
        observacao:
          type: string
          description: "Uma descrição sobre a sede, ponto de referência ou outra observação qualquer."
          example: "Na Avenida Brasil, depois do shopping ABC."
      required:
        - nome
        - observacao
    UpsertSede:
      allOf:
        - $ref: '#/components/schemas/Endereco'
        - $ref: '#/components/schemas/AtributosSede'
    Sede:
      type: object
      allOf:
        - $ref: '#/components/schemas/UpsertSede'
      properties:
        id:
          type: integer
          description: "Atributo que identifica cada sede de maneira única."
          example: "56"


    AtributosMotorista:
      type: object
      properties:
        nome:
          type: string
          description: "Nome do motorista."
          example: "João da Silva"
        carteira:
          type: string
          description: "Dados, número, ou tipo da carteira de motorista."
          example: "Categoria B"
        email:
          type: string
          description: "Email do motorista."
          format: email
      required:
        - nome
        - carteira
        - email
    UpsertMotorista:
      allOf:
        - $ref: '#/components/schemas/AtributosMotorista'
    Motorista:
      type: object
      allOf:
        - $ref: '#/components/schemas/AtributosMotorista'
      properties:
        id:
          type: integer
          description: "Atributo que identifica cada motorista de maneira única."
          example: "22"

    AtributosVeiculo:
      type: object
      properties:
        modelo:
          type: string
          description: "Modelo do veículo."
          example: "Hyundai HR Baú"
        marca:
          type: string
          description: "Marca da montadora do veículo."
          example: "Hyundai"
        placa:
          type: string
          description: "Placa do veículo, atributo único, padrão Mercosul ou padrão brasileiro anterior."
          pattern: '[A-Z]{3}-\d{4}|[A-Z]{3}\d[A-Z]\d{2}'
        ano:
          type: integer
          description: "Ano de fabricação do veículo."
          example: "2020"
        renavan:
          type: number
          description: "Número de identificação do veículo."
          example: "3214569871"
          pattern: '\d{10}'
        tamanho:
          type: string
          description: "Tamanho do veículo."
          example: "3,58m"
      required:
        - modelo
        - marca
        - placa
        - ano
        - renavan
        - tamanho
    UpsertVeiculo:
      allOf:
        - $ref: '#/components/schemas/AtributosVeiculo'
    Veiculo:
      type: object
      allOf:
        - $ref: '#/components/schemas/UpsertVeiculo'
      properties:
        id:
          type: integer
          description: "Atributo que identifica cada veículo de maneira única."
          example: "102"

    UpsertMaterial:
      type: object
      description: "Cadastra um material no banco de dados. Neste passo ele é apenas cadastrado no banco de dados.
          Para adicionálo em uma sugestão de viagem específica deve-se utilizar o endpoint correto."
      properties:
        nome:
          type: string
          description: "Nome do produto em questão."
          example: "Monitor de 21 polegadas"
        descricao:
          type: string
          description: "Descricao do material a ser transportado."
          example: "Malote de socumentos"
    Material:
      type: object
      allOf:
        - $ref: '#/components/schemas/UpsertMaterial'
      properties:
        id:
          type: integer
          description: "Atributo que identifica cada material de maneira única."
          example: "188"

    MaterialQuantidadeSetor:
      type: object
      properties:
        materialId:
          type: integer
          description: "Id do material que deve ser transportado."
        quantidade:
          type: integer
          description: "Quantidade do material que deve ser transportado."
        setorDestino:
          type: integer
          description: "Setor onde o materia deve ser entregue na unidade de destino."
    UpsertDestino:
      type: object
      description: "Sede por onde o transporte deve passar e os materiais que ele deve deixar nesta parada."
      properties:
        sedeId:
          type: integer
          description: "Id da sede para onde devem ir os materiais transportados"
        materiaisQntdSetor:
          type: array
          items:
            $ref: '#/components/schemas/MaterialQuantidadeSetor'
            # O status será adicionado automaticamente no backend
            # -> se o ADMIN criar este destino ele terá status = true
            # -> se outro usuário criar este destino ele terá status = false até que o ADMIN confirme
    Destino:
      type: object
      allOf:
        - $ref: '#/components/schemas/UpsertDestino'
      properties:
        id:
          type: integer
          description: "Atributo que identifica cada destino de maneira única."
          example: "3"
        status:
          $ref: '#/components/schemas/Confirmacao'

    Confirmacao:
      type: object
      properties:
        confirmacao:
          type: string
          description: "Se passado por um ADMIN confirmará ou não a viagem, caso contrário, nada acontece."
          example: "CONFIRMADO"
          enum:
            - CONFIRMADO
            - NAO_CONFIRMADO

    Encerramento:
      type: object
      properties:
        encerrado:
          type: string
          description: "Se passado por um ADMIN encerrará a viagem, caso contrário, nada acontece."
          example: "ENCERRAR"
          enum:
            - ENCERRAR

    UpsertViagem:
      type: object
      description: "Todas as informacoes necessarias para o agendamento de uma viagem"
      required:
        - datetimeSaida
      properties:
        motoristaId:
          type: integer
          description: "Id único que identifica o motorista desta viagem."
        veiculoId:
          type: integer
          description: "Id único que identifica o veiculo usado nesta viagem."
        destinos:
          type: array
          items:
            type: integer
        datetimeSaida:
          type: string
          description: "Data e hora de partida da viagem."
        datetimeVolta:
          type: string
          description: "Data e hora de partida da viagem."
        sede:
          type: integer
          description: "Atributo que identifica a sede de onde parte a viagem."
          example: "32"

    Viagem:
      type: object
      allOf:
        - $ref: '#/components/schemas/UpsertViagem'
      properties:
        status:
          $ref: '#/components/schemas/Confirmacao'
        encerrado:
          type: string
          description: "Atributo que identifica se a viagem já foi encerrada possibilidades: ENCERRADO ou NAO_ENCERRADO"
          example: "ENCERRADO"
        sede:
          type: integer
          description: "Atributo que identifica a sede de onde parte a viagem."
          example: "32"
        id:
          type: integer
          description: "Atributo que identifica cada viagem de maneira única."
          example: "44"
    Setor:
      type: object
      description: "Todas as informacoes necessarias para o registro de um setor"
      properties:
        id:
          type: integer
          description: "Id único que identifica o setor."
        nome:
          type: string
          description: "Nome do setor."

  responses:
    400:
      description: "Algo de errado aconteceu com a requisicao."
    403:
      description: "Este usuário não tem permissões para executar esta ação."

  parameters:
    id:
      name: id
      in: path
      required: true
      description: "O id da entidade que desejamos analisar"
      schema:
        type: integer

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
#    BasicAuth:
#      type: http
#      scheme: basic

security:
  - BearerAuth: [ ]
#  - BasicAuth: [ ]
